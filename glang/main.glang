int show_window = 1;
int flag_no_recalc = 0;
int points[10][3];
int pixels[800][800][3];
int a[3];
int b[3];
int sx[10];
int sy[10];
int ns[10]; 
int t = 0;
int i = 0;
int j = 0;
int k = 0;
int d = 0;
int l = 0;
int c = 0;
int maxd = 1000000000;
int retd = 0;


void dist() {
    retd = (b[0]-a[0])*(b[0]-a[0])+(b[1]-a[1])*(b[1]-a[1]);
    return;
}

void calc_new_centers() {
    for i from 0 to 10 {
        sx[i] = 0;
        sy[i] = 0;
        ns[i] = 0;
    }
    for i from 0 to 800 {
        for j from 0 to 800 {
            if pixels[i][j][2] >= 0 {
                sx[pixels[i][j][2]] = sx[pixels[i][j][2]] + pixels[i][j][0];
                sy[pixels[i][j][2]] = sy[pixels[i][j][2]] + pixels[i][j][1];
                ns[pixels[i][j][2]] = ns[pixels[i][j][2]] + 1;
            }
        }
    }
    for i from 0 to 10 {
        t = sx[i] / ns[i];
        if points[i][0] != t {
            points[i][0] = t;
        }
        t = sy[i] / ns[i];
        if points[i][1] != t {
            points[i][1] = t;
        }
    }
    return;
}

void calc_vor_diag() {
    for i from 0 to 800 {
        maxd = 1000000000;
        for d from 0 to 800 {
            k = 0;
            while k < 10 & maxd > 0{
                for l from 0 to 3 {
                    a[l] = pixels[i][d][l];
                    b[l] = points[k][l];
                }
                dist();
                if retd < maxd {
                    maxd = retd;
                    pixels[i][d][2] = k;
                }
                k = k + 1;
            }
            maxd = 1000000000;
            pixels[i][d][0] = d;
            pixels[i][d][1] = i;
        }
    }
    return;
}

void display() {
    calc_vor_diag();
    gl_start();
    for i from 0 to 800 {
        for j from 0 to 800 {
            gl_put_pixel(j, i, pixels[i][j][2]);
        }
    }
    gl_flush();
    return;
}

void loop() {
    display();
    while 1 {
        calc_new_centers();
        display();
    }
    return;
}

void reset_picture() {
    for i from 0 to 10 {
        c = int_rand();
        points[i][0] = c % 800;
        c = int_rand();
        points[i][1] = c % 800;
    }
    calc_vor_diag();
    return;
}

void main() {
    gl_init();
    reset_picture();
    loop();
    return;
}